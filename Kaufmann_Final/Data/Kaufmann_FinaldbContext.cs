// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Kaufmann_Final.Models;

namespace Kaufmann_Final.Data
{
    public partial class Kaufmann_FinaldbContext : DbContext
    {
        public Kaufmann_FinaldbContext()
        {
        }

        public Kaufmann_FinaldbContext(DbContextOptions<Kaufmann_FinaldbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<Infraction> Infractions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Driver>(entity =>
            {
                entity.HasKey(e => e.DriverLicenseNumber);

                entity.Property(e => e.DriverLicenseNumber)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfBirth).HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SocialSecurity)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Infraction>(entity =>
            {
                entity.Property(e => e.InfractionId).HasColumnName("InfractionID");

                entity.Property(e => e.DriverLicenseNumber)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.InfractionDate).HasColumnType("date");

                entity.Property(e => e.LicensePlate)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Offence)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DriverLicenseNumberNavigation)
                    .WithMany(p => p.Infractions)
                    .HasForeignKey(d => d.DriverLicenseNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Infractions_Drivers");

                entity.HasOne(d => d.LicensePlateNavigation)
                    .WithMany(p => p.Infractions)
                    .HasForeignKey(d => d.LicensePlate)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Infractions_Vehicles");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.HasKey(e => e.LicensePlate);

                entity.Property(e => e.LicensePlate)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Make)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.HasMany(d => d.DriverLicenseNumbers)
                    .WithMany(p => p.LicensePlates)
                    .UsingEntity<Dictionary<string, object>>(
                        "VehicleOwner",
                        l => l.HasOne<Driver>().WithMany().HasForeignKey("DriverLicenseNumber").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_VehicleOwner_Drivers"),
                        r => r.HasOne<Vehicle>().WithMany().HasForeignKey("LicensePlate").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_VehicleOwner_Vehicles"),
                        j =>
                        {
                            j.HasKey("LicensePlate", "DriverLicenseNumber");

                            j.ToTable("VehicleOwner");

                            j.IndexerProperty<string>("LicensePlate").HasMaxLength(6).IsUnicode(false);

                            j.IndexerProperty<string>("DriverLicenseNumber").HasMaxLength(13).IsUnicode(false);
                        });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}